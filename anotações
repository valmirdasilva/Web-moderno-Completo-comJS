NOME OFICIAL DO JS = ECMASCRIPT

=============================================================================================================================
BÁSICO DE VAR, LET E CONST
declaração de variável
ex: var a = 3  | let a = 3 
declaração de constantes
ex: const a = 3

=============================================================================================================================
TIPAGEM FRACA
JavaScript possui uma tipagem dinamica, que é considerado fracamente tipada
ex: 
let qualquer = 'teste' -- no momento ele é tipo string

let qualquer = '123' -- agora ele já atribui um novo valor do tipo number
Isto é considerado uma tipagem fraca

=============================================================================================================================
TIPO NUMBER
formas de atribuir numbers a uma variável
const peso1 = 1.0
const peso2 = Number('2.2')

isInterger VERIFICA SE O VALOR É INTEIRO OU NÃO, RETORNANDO TRUE OR FALSE
console.log(Number.isInterger(peso1)) = TRUE
como peso1 é 1.0 ele retorna TRUE é um valor inteiro

console.log(Number.isInterger(peso2)) = FALSE
como peso2 é 2.2 ele retorna FALSE é um valor quebrado com ponto flutuante

TOFIXED()
let media = 9.871101010
ex: console.log(media.toFixed(2)) = 9.87 -- você pode delimitar as casas decimais para exibir

TOSTRING()
console.log(media.toString(2)) -- você pode converter o valor da variavel media em um valor binario

NUMBER ALGUNS CUIDADOS
console.log(7 / 0) = Está operação vai lhe retornar valor infinito
console.log("10" / 2) = A operação é executada pois mesmo o 10 sendo string o operador reconhece e faz a divisão o resultado vem 5
console.log("Show" * 2) = O retorno é um  NaN o operador não reconhece o Show como um number e não executa a multiplicação
console.log(0.1 + 0.7) = retorna um valor aproximado mas não exato, por questões de desempenho exato iria demorar para executar
console.log(10.toString()) = retorna um erro, a função executa number mas não em sua forma literal.
console.log((10.345).toFixed(2)) = a operação é realizada desta forma a função é exeucatada resultado 10.34

=============================================================================================================================
API DO JS MATH  -- é um objeto
Ele serve para fazer operações de exponenciação
ex: 
const raio = 5.6
const area = Math.PI * Math.pow(raio, 2)
console.log(area) = 98.5203456165759 
com este comando ele já executa a conta de exponenciação sem nenhuma dificuldade e mais rápido.

=============================================================================================================================
TIPO STRING
FUNÇÕES DENTRO DAS STRINGS
ex:
const escola = "Cod3r" -- constante usada de exemplo

console.log(escola.charAt(4)) = ele busca pelo indice e retorna o caractere que está na posição 4 que seria o 'r'
console.log(escola.charAt(5)) = procurando um indice que não existe, ele retorna vazio
console.log(escola.charCodeAt(3)) = Ele pega este valor e retorna o valor real HTML buscado na tabela unicode
console.log(escola.indexOf(d)) = Está função pega o caractere selecionado e retorna o indice do local que seria 2
console.log(escola.substring(1)) = Vai exibir a partir do indice 1 assim resultado sendo Od3r
console.log(escola.substring(0.3)) = Vai exibir a partir do indice 0 e limitando até o 3 assim resultado fica Cod 
console.log(`Escola ${escola}!`) = Está sendo concatenado para exibir "Escola cod3r!"
console.log(escola.replace(3, 'e')) = Pega um caractere dentro da variável ou constante e muda resultado "Coder"
console.log('ana,maria,pedro'.split(',')) = pega está sequencia de nomes e monta em um array resultado
['ana', 'maria','pedro']

=============================================================================================================================
TEMPLATE STRINGS
Para iniciar uma template strings é usado crase ``
ex: const nome = 'Rebeca'
const template = `Olá ${nome}!`
console.log(`${template}`) - resposta = Olá Rebeca!
template string permite quebra de linha na exibição.

ARROW FUNCTION e UPPERCASE
Na função a baixo está sendo criado uma constante up com o valor text e com uma arrow function => está sendo atribuido a texto o toUpperCase ele deixa as letras maisculas
const up = texto => texto.toUpperCase()
console.log(`Ei... ${up('cuidado')}!`) -- resultado = Ei... CUIDADO!

=============================================================================================================================
TIPO BOOLEAN
O que é um boolen? são valores expressados como TRUE OR FALSE
Ex:
isAtivo = true --> isto é um valor boolean

EXPRESSANDO BOOLEAN EM NÚMEROS
isAtivo = 1
console.log(!!isAtivo) --> com negação se consegue expressar valores boolean através de números

LISTA DE BOOLEAN VERDADEIROS
console.log(!!3)
console.log(!!-1)
console.log(!!' ')
console.log(!!'texto')
console.log(!!'[]')
console.log(!!{})
console.log(!!Infinity)
console.log(!!(isAtivo = true))

LISTA DE BOOLEAN FALSOS
console.log(!!0)
console.log(!!'')
console.log(!!null)
console.log(!!NaN)
console.log(!!undefined)
console.log(!!(isAtivo = false))

CURIOSIDADES
console.log(!!('' || null || 0 || 'oi')) = 'oi' -- na sequencia só retornou oi por que antes do oi todos os valores eram false   

O BOOLEAN SEMPRE VAI BUSCAR PELO TRUE 
Ex: let nome = ''
console.log(nome || 'Desconhecido') = 'Desconhecido' --> como o nome estava vazio ele era um boolean false, assim com a condição ele achou a string que é considerado TRUE e exibiu como resposta


=============================================================================================================================
ARRAY: typeof -- objeto
O que é um array? array é uma forma de agrupar multiplos valores de uma forma linear, um após o outro.
ex: 
const valores = [7.7, 8.9, 6.3, 9.2] = um array

CAPTURAR O INDICE EM ESPECIFICO
console.log(valores[3]) - resposta = 9.2

selecionando o indice pode se adicionar novos valores dentro do array
valore[4] = 10 ---- console.log(valores) = [7.7, 8.9, 6.3, 9.2, 10]

FUNÇÃO PUSH()
valores.push(false, null, 'teste') => com push você pode adicionar novos valores no array criando mais indices.
valores.push(false, null, 'teste') -- console.log(valores)
[7.7, 8.9, 6.3, 9.2,false, null, 'teste']

FUNÇÃO POP()
tira o ultimo valor do array -- ex: console.log(valores.pop())
[7.7, 8.9, 6.3, 9.2,false, null] - teste sendo o ultimo do array foi sacado para fora.

FUNÇÃO DELETE
também tira algum valor do array mas pode selecionar pelo indice.
ex: delete valores[0] --- console.log(valores)
[<1 empty item>, 8.9, 6.3, 9.2,false, null] "empty item só aparece por que logo após o indice 0 tem mais valores então o console retorna dizendo que a casa esta vazia e continua a sequencia",

=============================================================================================================================
OBJETO:
O que é um objeto? objeto é um grupo de chaves e valores, onde se atribui valores a estas chaves como inteiros, reias, boolean.
ex: const teste {
    nome:'joão'
    idade:'30'
}
console.log(teste) = {nome:'joão',idade:'30'}

const teste {}
    teste.nome:'joão'
    teste.idade:'30'
AMBAS AS FORMAS EXIBEM O MESMO RESULTADO   
console.log(teste) = {nome:'joão',idade:'30'}

============================================================================================================================= 
NULL E UNDEFINED
O que é null? É a ausência de valor ela não recebe e nem aponta para lugar nenhum
O que é undefined? É quando não é atribuido nada a váriavel o valor fica undefined

undefined ex:
let valor 
console.log(valor) = undefined  -- pela varivel estar sem nada atribuido a resposta é undefined

null ex:
let valor = null 
console.log(valor) = null -- aqui  foi inicializado e  atribuido o valor null. Mas null não aponta para lugar nenhum, fica sem valor e sem endereço para apontar

============================================================================================================================= 
FUNÇÕES

console.log(typeof Object) = FUNCTION -- Object é uma função
class Produto {}
console.log(typeof Produto) = FUNCTION -- class é uma função

EXEMPLOS BÁSICOS DE FUNÇÕES
UMA FUNÇÃO SEM RETORNO
function imprimirSoma(a, b) { --> Dentro dos parentes estão os parametros da função
    console.log(a + b)
} 

ImprimirSoma(2, 3) = 5 --> Chamando a função que está somando o "a + b se tornam 2+3" assim executando a soma dos parametros
ImprimirSoma(2) = NaN --> Ele tenta somar um valor INT com UNDEFINED assim retorna NaN
ImprimirSoma() = NaN --> Passar a função sem parametros, executa mas retorna um NaN

UMA FUNÇÃO COM RETORNO
function soma(a, b = 0) {
    return a + b -- está fazendo o retorno da função
}

console.log(soma(2, 3)) = 5 --> está chamando a função soma com os parametros

ARMAZENANDO UM FUNÇÃO EM UMA VARIÁVEL

const imprimirSoma = function (a, b) { --> Isto é uma função oculta
    console.log(a + b) 
}
imprimirSoma(2, 3) = 5 --> com a função oculta está chamando a constante imprimirSoma com os parametros da função a + b que são 2, 3

ARMAZENANDO UMA FUNÇÃO ARROW EM UMA VARIAVEL
const soma = (a, b) => {
    return a + b
}
console.log(soma(2, 3))

// retorno implícito
const subtracao = (a,b) => a-b

console.log(subtracao(2, 3))

=============================================================================================================================
DECLARAÇÃO DE VARIÁVEIS COM VAR

{
    {
        {
            { 
                var sera = 'Será' // EM BLOCOS VAR FUNCIONA COMO UMA VARIAVEL GLOBAL ASSIM PODENDO SER PEGA DE QUALQUER LUGAR
                console.log(sera)
            }
        }
    }
}
console.log(sera)

function teste() {
    var local = 123 // VAR DENTRO DE UMA FUNÇÃO FICA DENOMINADA A ESTE ESCOPO ENTÃO NÃO PODE SER CHAMADA DE FORA
}

teste() = está exibindo a função quando dentro tem o console.log 
console.log(local) = ERRO //IMPRIMIU ERRO POR QUE VAR DENTRO DE UMA FUNCTION NÃO PODE SER CHAMADA DE FORA

EXEMPLO 2

var numero = 1
{
    var numero = 2
    console.log('dentro=', numero) = dentro= 2
}
console.log('fora=', numero) fora= 2 NA VARIAVEL VAR NÃO EXISTE ESCOPO DE BLOCO, ASSIM SEMPRE QUANDO DECLARAR ALGO NO BLOCO VIRA GLOBAL 


DECLARAÇÃO DE VARIÁVEIS COM LET

var numero = 1
{
    let numero = 2
    console.log('dentro=', numero)
}
console.log('fora=', numero)
COMO A VARIAVEL LET DIFERENCIA BLOCOS ELA ACABA DIFERENCIANDO OS BLOCOS E OS VALORES SÃO APLICADOS CORRETAMENTE SENDO 2 SOMENTE DE UM BLOCO ESPECIFICO

=============================================================================================================================
USANDO VAR EM LOOP

ESTA EXPRESÃO ESTÁ FORMANDO UM LOOP 'FOR = se'| 'var i = 0' está criando uma variavel chamada 'i' e atribuindo o valor '0' |
em 'i < 10' está sendo adicionado uma condição que se 'i' for '< = menor' que '10' | 'i++' será acrescentado a 'i' '++' 0 + 1
assim até fechar o loop 
for (var i = 0; i < 10; i++) {
    console.log(i)
}
USANDO LET EM LOOP

COM A EXPRESSÃO LET O LOOP VAI SER IGUAL
for (let i = 0; i < 10; i++) {
    console.log(i)
}
MAS ESTE CONSOLE VAI DAR ERRO JÁ QUE O LET SÓ FUNCIONA DENTRO DO ESCOPO DO BLOCO
console.log('i=', i)

=============================================================================================================================
FUNÇÃO VS OBJETO

// FUNÇÃO
console.log(typeof Object)
// OBJETO
 console.log(typeof new Object)
// FUNÇÃO
const Cliente = function() {}
console.log(typeof Cliente)
// OBJETO
console.log(typeof new Cliente)
// FUNÇAO
class Produto {} // ES 2015 (ES6)
console.log(typeof Produto)
// OBJETO
console.log(typeof new Produto)

=============================================================================================================================
PAR NOME / VALOR
const saudacao = 'Opa' // contexto léxico 1

function exec() {
    const saudacao = 'Fala' // contexto léxico 2
    return saudacao
}
// Objetos são grupos aninhados de pares nome/valor
const cliente = {
    nome: 'Pedro',
    idade: 32,
    peso: 90,
    endereco: {
        logradouro: 'Rua Muito Legal',
        numero: 123
    }
}

console.log(saudacao) = 'Opa' -- Vai exibir a constante que está no escopo de fora pois está chamando a constante e não função
console.log(exec()) = 'Fala' -- Vai exibir a constante dentro da function que está retornando a atribuição 'Fala'
console.log(cliente) -- Vai retornar a lista dentro do objeto já que tudo está dentro da constante cliente

=============================================================================================================================
NOTAÇÃO PONTO

console.log(Math.ceil(6.1))

const obj1 = {}
obj1.nome = 'Bola'
console.log(obj1.nome)

function Obj(nome) {
    this.nome = nome 
    O QUE 'this' FAZ O NOME ASSOCIADO AO OBJETO DA FUNÇÃO ELE FICA VISIVEL PARA SER INSTÂNCIADO 
    this.exec = function () {
        console.log('exec...')
        DESTE MODO ESTÁ INSTANCIANDO COM O 'this' PARA TORNAR DISPONIVEL PUXAR O ATRIBUTO QUE TEM DENTRO PARA FORA
    }
}

const obj2 = new Obj('Cadeira')
const obj3 = new Obj('Mesa')
COM O 'this' TORNANDO DISPONIVEL O 'nome' DENTRO DA FUNCTION POSSO ASSIM ATRIBUIR NOVOS VALORES DA FUNCTION 'Obj'
RESULTADOS A BAIXO 
console.log(obj2.nome) = 'Cadeira'
console.log(obj3.nome) = 'Mesa'
obj3.exec() DESTE MODO NÃO PRECISA USAR O CONSOLE.LOG NA HORA DE PUXAR JÁ QUE DENTRO DA FUNÇÃO TEM

=============================================================================================================================
OPERADORES: DESTRUCTURING

// novo recurso do ES2015

const pessoa = {
    nome: 'Ana',
    idade: 5,
    endereco: {
        logradouro: 'Rua ABC',
        numero: 1000
    }
}

const {nome, idade } = pessoa 
console.log(nome, idade) = Ana 5 -- COM O DESTRUCTURING ESTÁ PUXANDO AS INFORMAÇÕES 'nome, idade' DE DENTRO DA 'const pessoa' ASSIM EXIBINDO COM CONSOLE OS VALORES DE DENTRO DA CONST PESSOA

const {nome: n, idade: i} = pessoa
console.log(n, i)
DESTE MODO ESTOU ATRIBUINDO NOVOS NOMES PARA AS VARIAVEIS.

const { endereco: {logradouro, numero} } = pessoa
DESTE MODO ESTA CENDO ACESSADO UM OBJETO DENTRO DA 'const pessoa' QUE SERÁ EXIBIDO NORMALMENTE

function rand({min = 0, max = 1000}) {
    const valor = Math.random() * (max - min) + min
    return Math.floor(valor)
}
NESTA FUNCTION COM OS PARAMETRO MIN E MAX E API MATH ELE ESTÁ DEIXANDO OS VALORES DE MODO ALEATÓRIO DELIMITANDO DE 0 A 1000

const obj = { max: 50, min: 40}
console.log(rand(obj)) // NESTE EXEMPLO ELE VAI GERAR VALORES ALEATÓRIOS ENTRE 50 E 40
console.log(rand({min: 955})) GERA VALORES ALEATÓRIOS ENTRE 955 A 1000
console.log(rand({})) VAI GERAR VALORES ALEATÓRIOS ENTRE 0 A 1000
console.log(rand()) VAI DAR ERRO, JÁ QUE NÃO ESTÁ PASSANDO E NEM PEGANDO NENHUM PARAMETRO